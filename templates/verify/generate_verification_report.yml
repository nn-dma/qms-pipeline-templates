parameters:
  stage_name: ""
  environment_name: ""
  it_solution_name: ""
  feature_files_path: ""
  system_design_path: ""
  system_configuration_path: ""
  template_repo: "qms_pipeline_templates"
  verification_report_template_location: "qms-pipeline-templates/templates/templates/report/VerificationReportTemplate.html"
  render_configuration_specifications_py_location: "qms-pipeline-templates/templates/scripts/report/render_configuration_specifications.py"
  render_design_specifications_py_location: "qms-pipeline-templates/templates/scripts/report/render_design_specifications.py"
  render_json_test_result_py_location: "qms-pipeline-templates/templates/scripts/report/render_json_test_result.py"
  render_replace_py_location: "qms-pipeline-templates/templates/scripts/report/render_replace.py"
  render_requirements_py_location: "qms-pipeline-templates/templates/scripts/report/render_requirements.py"
  get_pull_request_id_py_location: "qms-pipeline-templates/templates/scripts/report/get_pull_request_id.py"
  extract_requirements_name_to_id_mapping_py_location: "qms-pipeline-templates/templates/scripts/report/extract_requirements_name_to_id_mapping.py"
  get_verification_report_filename_for_context_sh_location: "qms-pipeline-templates/templates/scripts/report/get_verification_report_filename_for_context.sh"
  get_verification_report_artifact_name_for_context_sh_location: "qms-pipeline-templates/templates/scripts/report/get_verification_report_artifact_name_for_context.sh"
  test_results_artifact_name: ""
  test_results_format: "behave-allure"
  ready_for: ""

# Description:
#   Allowed parameter values for
#     ready_for: [ "production", "use"]
#     test_results_format: [ "behave-allure"]

# Purpose:
#   This template is used to generate a verification report for a given environment [validation|production]
#   based on provided context of what is being verified (i.e. released) and test execution results.

# Expected output:
#   A verification report in HTML format is generated and stored in the artifact store.

stages:
  - stage: ${{ parameters.stage_name }}
    condition: and(not(or(failed(), canceled())), contains(variables['Build.SourceBranch'], 'refs/heads/release/'))
    variables:
      dependency_location: qms-pipeline-templates/templates/scripts
      verification_report_file: null
    jobs:
      - job: generate_verification_report
        workspace:
          clean: all
        steps:
          - checkout: self
            fetchDepth: 0
          - checkout: ${{ parameters.template_repo }}

          - download: current
            artifact: ${{ parameters.test_results_artifact_name }}
            displayName: Download test results from artifact store

          - script: |
              rm -rf $(Pipeline.Workspace)/${{ parameters.test_results_artifact_name }}/html
              cd $(Pipeline.Workspace)/${{ parameters.test_results_artifact_name }}
              ls -l
            condition: eq('${{ parameters.test_results_format }}', 'behave-allure')
            displayName: Remove HTML folder if it exists

          - script: |
              RED='\033[0;31m'    # Red
              GREEN='\033[0;32m'  # Green
              PURPLE='\033[0;35m' # Purple
              NC='\033[0m'        # No Color

              echo -e "============= ${PURPLE}PARAMETERS${NC} ============="
              echo -e "${PURPLE}stage_name:${NC} ${{ parameters.stage_name }}"
              echo -e "${PURPLE}environment_name:${NC} ${{ parameters.environment_name }}"
              echo -e "${PURPLE}it_solution_name:${NC} ${{ parameters.it_solution_name }}"
              echo -e "${PURPLE}feature_files_path:${NC} ${{ parameters.feature_files_path }}"
              echo -e "${PURPLE}system_design_path:${NC} ${{ parameters.system_design_path }}"
              echo -e "${PURPLE}system_configuration_path:${NC} ${{ parameters.system_configuration_path }}"
              echo -e "${PURPLE}verification_report_template_location:${NC} ${{ parameters.verification_report_template_location }}"
              echo -e "${PURPLE}render_configuration_specifications_py_location:${NC} ${{ parameters.render_configuration_specifications_py_location }}"
              echo -e "${PURPLE}render_design_specifications_py_location:${NC} ${{ parameters.render_design_specifications_py_location }}"
              echo -e "${PURPLE}render_json_test_result_py_location:${NC} ${{ parameters.render_json_test_result_py_location }}"
              echo -e "${PURPLE}render_replace_py_location:${NC} ${{ parameters.render_replace_py_location }}"
              echo -e "${PURPLE}render_requirements_py_location:${NC} ${{ parameters.render_requirements_py_location }}"
              echo -e "${PURPLE}get_pull_request_id_py_location:${NC} ${{ parameters.get_pull_request_id_py_location }}"
              echo -e "${PURPLE}extract_requirements_name_to_id_mapping_py_location:${NC} ${{ parameters.extract_requirements_name_to_id_mapping_py_location }}"
              echo -e "${PURPLE}get_verification_report_filename_for_context_sh_location:${NC} ${{ parameters.get_verification_report_filename_for_context_sh_location }}"
              echo -e "${PURPLE}get_verification_report_artifact_name_for_context_sh_location:${NC} ${{ parameters.get_verification_report_artifact_name_for_context_sh_location }}"
              echo -e "${PURPLE}test_results_artifact_name:${NC} ${{ parameters.test_results_artifact_name }}"
              echo -e "${PURPLE}test_results_format:${NC} ${{ parameters.test_results_format }}"
              echo -e "${PURPLE}ready_for:${NC} ${{ parameters.ready_for }}"
              echo "======================================="

              echo "current directory:"
              pwd

              echo "installing poetry (1.4.1)"
              pip install poetry==1.4.1

              echo "copying poetry files to root"
              cp ${{ variables.dependency_location }}/poetry.lock .
              cp ${{ variables.dependency_location }}/pyproject.toml .
              poetry install

              echo "branch:"
              echo "origin/release/$(Build.SourceBranchName)"

              echo "template_repo:"
              echo ${{ parameters.template_repo }}
              cd qms-pipeline-templates
              echo "local branches (${{ parameters.template_repo }}):"
              git branch
              echo "remote branches (${{ parameters.template_repo }}):"
              git branch -r
              cd ..

              echo "triggering pull request merge commit:"
              echo $COMMIT_HASH
              echo "Build.Repository.Name:"
              echo $(Build.Repository.Name)

              echo -e "================> ${PURPLE}Extracting and rendering pull request links${NC}"
              echo "poetry run python ${{ parameters.get_pull_request_id_py_location }} -commit $COMMIT_HASH -accesstoken USE_ENV_VARIABLE -organization novonordiskit -project '$(System.TeamProject)' -repository $(Build.Repository.Name) -result pull_request_id"
              prId=$(poetry run python ${{ parameters.get_pull_request_id_py_location }} -commit $COMMIT_HASH -accesstoken USE_ENV_VARIABLE -organization novonordiskit -project '$(System.TeamProject)' -repository $(Build.Repository.Name) -result pull_request_id)
              echo $prId
              sed -i "s|<var>PULL_REQUEST_LINK</var>|$(System.CollectionUri)$(System.TeamProject)/_git/$(Build.Repository.Name)/pullrequest/$prId|g" ${{ parameters.verification_report_template_location }}

              echo -e "================> ${PURPLE}Extracting and rendering pull request closed timestamp${NC}"
              echo "poetry run python ${{ parameters.get_pull_request_id_py_location }} -commit $COMMIT_HASH -accesstoken USE_ENV_VARIABLE -organization novonordiskit -project '$(System.TeamProject)' -repository $(Build.Repository.Name) -result pull_request_closed_timestamp"
              prClosedTimestamp=$(poetry run python ${{ parameters.get_pull_request_id_py_location }} -commit $COMMIT_HASH -accesstoken USE_ENV_VARIABLE -organization novonordiskit -project '$(System.TeamProject)' -repository $(Build.Repository.Name) -result pull_request_closed_timestamp)
              echo $prClosedTimestamp
              sed -i "s|<var>TIMESTAMP_PIPELINE_START</var>|$prClosedTimestamp|g" ${{ parameters.verification_report_template_location }}

              echo -e "================> ${PURPLE}Extracting and rendering related work items${NC}"
              echo "poetry run python ${{ parameters.get_pull_request_id_py_location }} -commit $COMMIT_HASH -accesstoken USE_ENV_VARIABLE -organization novonordiskit -project '$(System.TeamProject)' -repository $(Build.Repository.Name) -result work_items > workItemsHtml.html"
              poetry run python ${{ parameters.get_pull_request_id_py_location }} -commit $COMMIT_HASH -accesstoken USE_ENV_VARIABLE -organization novonordiskit -project '$(System.TeamProject)' -repository $(Build.Repository.Name) -result work_items > workItemsHtml.html
              cat workItemsHtml.html
              poetry run python ${{ parameters.render_replace_py_location }} -render ./workItemsHtml.html -template ${{ parameters.verification_report_template_location }} -placeholder "<var>WORK_ITEM_LINKS</var>"
              poetry run python ${{ parameters.render_replace_py_location }} -render ./workItemsHtml.html -template ${{ parameters.verification_report_template_location }} -placeholder "<kbd><var>CHANGE_ITEM</var></kbd>"

              echo -e "================> ${PURPLE}Extracting and mapping feature names with unique tags${NC}"
              poetry run python ${{ parameters.extract_requirements_name_to_id_mapping_py_location }} -folder ${{ parameters.feature_files_path }} > requirementsNameToIdMapping.dict

              echo -e "================> ${PURPLE}Extracting and rendering test results${NC}"
              poetry run python ${{ parameters.render_json_test_result_py_location }} -folder $(Pipeline.Workspace)/${{ parameters.test_results_artifact_name }} -mapping ./requirementsNameToIdMapping.dict > testResultsHtml.html
              poetry run python ${{ parameters.render_replace_py_location }} -render ./testResultsHtml.html -template ${{ parameters.verification_report_template_location }} -placeholder "<var>TESTCASE_RESULTS</var>"

              echo -e "================> ${PURPLE}Entering folder '$(Build.Repository.Name)' for correct script execution context${NC}"
              cd $(Build.Repository.Name)

              echo -e "================> ${PURPLE}Extracting and rendering requirements${NC}"
              poetry run python ../${{ parameters.render_requirements_py_location }} -folder ${{ parameters.feature_files_path }} -branch origin/release/$(Build.SourceBranchName) -organization novonordiskit -project '$(System.TeamProject)' -repository $(Build.Repository.Name) > listOfRequirementsHtml.html
              poetry run python ../${{ parameters.render_replace_py_location }} -render ./listOfRequirementsHtml.html -template ../${{ parameters.verification_report_template_location }} -placeholder "<var>LIST_OF_REQUIREMENTS</var>"

              echo -e "================> ${PURPLE}Extracting and rendering design specifications${NC}"
              poetry run python ../${{ parameters.render_design_specifications_py_location }} -folder ${{ parameters.system_design_path }} -branch origin/release/$(Build.SourceBranchName) -organization novonordiskit -project '$(System.TeamProject)' -repository $(Build.Repository.Name) > listOfDesignSpecifications.html
              poetry run python ../${{ parameters.render_replace_py_location }} -render ./listOfDesignSpecifications.html -template ../${{ parameters.verification_report_template_location }} -placeholder "<var>LIST_OF_DESIGN_SPECIFICATIONS</var>"

              echo -e "================> ${PURPLE}Extracting and rendering configuration specifications${NC}"
              poetry run python ../${{ parameters.render_configuration_specifications_py_location }} -folder ${{ parameters.system_configuration_path }} -branch origin/release/$(Build.SourceBranchName) -organization novonordiskit -project '$(System.TeamProject)' -repository $(Build.Repository.Name) > listOfConfigurationSpecifications.html
              poetry run python ../${{ parameters.render_replace_py_location }} -render ./listOfConfigurationSpecifications.html -template ../${{ parameters.verification_report_template_location }} -placeholder "<var>LIST_OF_CONFIGURATION_SPECIFICATIONS</var>"

              echo -e "================> ${PURPLE}Exiting folder '$(Build.Repository.Name)' for correct script execution context${NC}"
              cd ..

              echo -e "================> ${PURPLE}Rendering IT solution name${NC}"
              sed -i 's|<var>IT_SOLUTION_NAME</var>|${{ parameters.it_solution_name }}|g' ${{ parameters.verification_report_template_location }}

              echo -e "================> ${PURPLE}Rendering pipeline run ID${NC}"
              sed -i 's|<var>PIPELINE_RUN_ID</var>|$(Build.BuildId)|g' ${{ parameters.verification_report_template_location }}

              echo -e "================> ${PURPLE}Rendering target environment name${NC}"
              sed -i 's|<var>ENVIRONMENT</var>|${{ parameters.environment_name }}|g' ${{ parameters.verification_report_template_location }}

              echo -e "================> ${PURPLE}Rendering ADO project name${NC}"
              sed -i 's|<var>ADO_PROJECT_NAME</var>|$(System.TeamProject)|g' ${{ parameters.verification_report_template_location }}

              echo -e "================> ${PURPLE}Rendering 'ready for' (production/use) value${NC}"
              sed -i 's|<var>IS_READY_FOR</var>|${{ parameters.ready_for }}|g' ${{ parameters.verification_report_template_location }}

              echo -e "================> ${PURPLE}Rendering pipeline run link${NC}"
              sed -i 's|<var>ADO_PIPELINE_RUN_LINK</var>|$(System.CollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId)\&view=results|g' ${{ parameters.verification_report_template_location }}

              echo -e "================> ${PURPLE}Rendering pipeline run artifacts link${NC}"
              sed -i 's|<var>ARTIFACTS_ADO_PIPELINE_LINK</var>|$(System.CollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId)\&view=artifacts\&pathAsName=false\&type=publishedArtifacts|g' ${{ parameters.verification_report_template_location }}

            env:
              SYSTEM_ACCESSTOKEN: $(System.AccessToken)
              COMMIT_HASH: $(Build.SourceVersion)
            displayName: Generate verification report as HTML

          - bash: echo "##vso[task.setvariable variable=verification_report_file]$(${{ parameters.get_verification_report_filename_for_context_sh_location }} "${{ parameters.environment_name }}" "$(Build.BuildId)" "${{ parameters.ready_for }}").html"
            displayName: Generate verification report filename

          - bash: echo "##vso[task.setvariable variable=verification_report_artifact]$(${{ parameters.get_verification_report_artifact_name_for_context_sh_location }} "${{ parameters.ready_for }}")"
            displayName: Generate verification report artifact name

          - script: |
              PURPLE='\033[0;35m' # Purple
              NC='\033[0m'        # No Color

              cp ${{ parameters.verification_report_template_location }} $(verification_report_file)
              echo -e "${PURPLE}VERIFICATION_REPORT_FILE:${NC} $(verification_report_file)"
            displayName: Assign name and other metadata to verification report file

          - publish: $(verification_report_file)
            artifact: $(verification_report_artifact)
            displayName: Publish verification report as build artifact

          
