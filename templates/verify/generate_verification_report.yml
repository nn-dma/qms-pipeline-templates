parameters:
  stage_name: ""
  environment_name: ""
  it_solution_name: ""
  feature_files_path: ""
  system_design_path: ""
  system_configuration_path: ""
  template_repo: ""
  verification_report_template_location: ""
  render_configuration_specifications_py_location: ""
  render_design_specifications_py_location: ""
  render_json_test_result_py_location: ""
  render_replace_py_location: ""
  render_requirements_py_location: ""
  get_pull_request_id_py_location: ""
  ready_for: ""

# Description:

# Purpose:

# Expected output:
stages:
  - stage: ${{ parameters.stage_name }}
    condition: not(or(failed(), canceled()))
    jobs:
      - job: generate_verification_report
        workspace:
          clean: all
        steps:
          - checkout: self
            fetchDepth: 0
          - checkout: ${{ parameters.template_repo }}

          - download: current
            artifact: pv-json
            displayName: Download PV Allure json test results from artifact store

          - script: |
              rm -rf $(Pipeline.Workspace)/pv-json/html
              cd $(Pipeline.Workspace)/pv-json
              ls -l
            displayName: Remove HTML folder if it exists

          - script: |
              RED='\033[0;31m'    # Red
              GREEN='\033[0;32m'  # Green
              PURPLE='\033[0;35m' # Purple
              NC='\033[0m'        # No Color

              echo -e "============= ${PURPLE}PARAMETERS${NC} ============="
              echo -e "${PURPLE}feature_files_path:${NC} ${{ parameters.feature_files_path }}"
              echo -e "${PURPLE}system_design_path:${NC} ${{ parameters.system_design_path }}"
              echo -e "${PURPLE}system_configuration_path:${NC} ${{ parameters.system_configuration_path }}"
              echo -e "${PURPLE}verification_report_template_location:${NC} ${{ parameters.verification_report_template_location }}"
              echo -e "${PURPLE}render_configuration_specifications_py_location:${NC} ${{ parameters.render_configuration_specifications_py_location }}"
              echo -e "${PURPLE}render_design_specifications_py_location:${NC} ${{ parameters.render_design_specifications_py_location }}"
              echo -e "${PURPLE}render_json_test_result_py_location:${NC} ${{ parameters.render_json_test_result_py_location }}"
              echo -e "${PURPLE}render_replace_py_location:${NC} ${{ parameters.render_replace_py_location }}"
              echo -e "${PURPLE}render_requirements_py_location:${NC} ${{ parameters.render_requirements_py_location }}"
              echo -e "${PURPLE}get_pull_request_id_py_location:${NC} ${{ parameters.get_pull_request_id_py_location }}"
              echo "======================================"

              echo "current directory:"
              pwd

              echo "branch:"
              echo "origin/release/$(Build.SourceBranchName)"

              echo "copying poetry files to root"
              cp qms-pipeline-templates/pyproject.toml .
              cp qms-pipeline-templates/poetry.lock .
              poetry install

              ls -la
              echo "template_repo:"
              echo ${{ parameters.template_repo }}

              echo "local branches (QMS-TEMPLATE):"
              cd QMS-TEMPLATE
              git branch
              echo "remote branches (QMS-TEMPLATE):"
              git branch -r
              cd ..

              echo "local branches (qms-pipeline-templates):"
              cd qms-pipeline-templates
              git branch
              echo "remote branches (qms-pipeline-templates):"
              git branch -r
              cd ..

              echo "triggering pull request merge commit:"
              echo $COMMIT_HASH
              echo "Build.Repository.Name:"
              echo $(Build.Repository.Name)

              echo -e "================> ${PURPLE}Extracting and rendering pull request links${NC}"
              echo "poetry run python ${{ parameters.get_pull_request_id_py_location }} -commit $COMMIT_HASH -accesstoken USE_ENV_VARIABLE -organization novonordiskit -project '$(System.TeamProject)' -repository $(Build.Repository.Name) -result pull_request_id"
              prId=$(poetry run python ${{ parameters.get_pull_request_id_py_location }} -commit $COMMIT_HASH -accesstoken USE_ENV_VARIABLE -organization novonordiskit -project '$(System.TeamProject)' -repository $(Build.Repository.Name) -result pull_request_id)
              echo $prId
              sed -i "s|<var>PULL_REQUEST_LINK</var>|$(System.CollectionUri)$(System.TeamProject)/_git/$(Build.Repository.Name)/pullrequest/$prId|g" ${{ parameters.verification_report_template_location }}

              echo -e "================> ${PURPLE}Extracting and rendering pull request closed timestamp${NC}"
              echo "poetry run python ${{ parameters.get_pull_request_id_py_location }} -commit $COMMIT_HASH -accesstoken USE_ENV_VARIABLE -organization novonordiskit -project '$(System.TeamProject)' -repository $(Build.Repository.Name) -result pull_request_closed_timestamp"
              prClosedTimestamp=$(poetry run python ${{ parameters.get_pull_request_id_py_location }} -commit $COMMIT_HASH -accesstoken USE_ENV_VARIABLE -organization novonordiskit -project '$(System.TeamProject)' -repository $(Build.Repository.Name) -result pull_request_closed_timestamp)
              echo $prClosedTimestamp
              sed -i "s|<var>TIMESTAMP_PIPELINE_START</var>|$prClosedTimestamp|g" ${{ parameters.verification_report_template_location }}

              echo -e "================> ${PURPLE}Extracting and rendering related work items${NC}"
              echo "poetry run python ${{ parameters.get_pull_request_id_py_location }} -commit $COMMIT_HASH -accesstoken USE_ENV_VARIABLE -organization novonordiskit -project '$(System.TeamProject)' -repository $(Build.Repository.Name) -result work_items > workItemsHtml.html"
              poetry run python ${{ parameters.get_pull_request_id_py_location }} -commit $COMMIT_HASH -accesstoken USE_ENV_VARIABLE -organization novonordiskit -project '$(System.TeamProject)' -repository $(Build.Repository.Name) -result work_items > workItemsHtml.html
              cat workItemsHtml.html
              poetry run python ${{ parameters.render_replace_py_location }} -render ./workItemsHtml.html -template ${{ parameters.verification_report_template_location }} -placeholder "<var>WORK_ITEM_LINKS</var>"
              poetry run python ${{ parameters.render_replace_py_location }} -render ./workItemsHtml.html -template ${{ parameters.verification_report_template_location }} -placeholder "<kbd><var>CHANGE_ITEM</var></kbd>"
              
              echo -e "================> ${PURPLE}Extracting and rendering test results${NC}"
              poetry run python ${{ parameters.render_json_test_result_py_location }} -folder $(Pipeline.Workspace)/pv-json > testResultsHtml.html
              poetry run python ${{ parameters.render_replace_py_location }} -render ./testResultsHtml.html -template ${{ parameters.verification_report_template_location }} -placeholder "<var>TESTCASE_RESULTS</var>"
              
              echo -e "================> ${PURPLE}Entering '$(Build.Repository.Name)' for correct script execution context${NC}"
              cd $(Build.Repository.Name)

              echo -e "================> ${PURPLE}Extracting and rendering requirements${NC}"
              poetry run python ../${{ parameters.render_requirements_py_location }} -folder ${{ parameters.feature_files_path }} -branch origin/release/$(Build.SourceBranchName) > listOfRequirementsHtml.html
              poetry run python ../${{ parameters.render_replace_py_location }} -render ./listOfRequirementsHtml.html -template ../${{ parameters.verification_report_template_location }} -placeholder "<var>LIST_OF_REQUIREMENTS</var>"
              
              echo -e "================> ${PURPLE}Extracting and rendering design specifications${NC}"
              poetry run python ../${{ parameters.render_design_specifications_py_location }} -folder ${{ parameters.system_design_path }} > listOfDesignSpecifications.html
              poetry run python ../${{ parameters.render_replace_py_location }} -render ./listOfDesignSpecifications.html -template ../${{ parameters.verification_report_template_location }} -placeholder "<var>LIST_OF_DESIGN_SPECIFICATIONS</var>"
              
              echo -e "================> ${PURPLE}Extracting and rendering configuration specifications${NC}"
              poetry run python ../${{ parameters.render_configuration_specifications_py_location }} -folder ${{ parameters.system_configuration_path }} > listOfConfigurationSpecifications.html
              poetry run python ../${{ parameters.render_replace_py_location }} -render ./listOfConfigurationSpecifications.html -template ../${{ parameters.verification_report_template_location }} -placeholder "<var>LIST_OF_CONFIGURATION_SPECIFICATIONS</var>"
              
              echo -e "================> ${PURPLE}Exiting '$(Build.Repository.Name)' for correct script execution context${NC}"
              cd ..

              echo -e "================> ${PURPLE}Rendering IT solution name${NC}"
              sed -i 's|<var>IT_SOLUTION_NAME</var>|${{ parameters.it_solution_name }}|g' ${{ parameters.verification_report_template_location }}

              echo -e "================> ${PURPLE}Rendering pipeline run ID${NC}"
              sed -i 's|<var>PIPELINE_RUN_ID</var>|$(Build.BuildId)|g' ${{ parameters.verification_report_template_location }}

              echo -e "================> ${PURPLE}Rendering target environment name${NC}"
              sed -i 's|<var>ENVIRONMENT</var>|${{ parameters.environment_name }}|g' ${{ parameters.verification_report_template_location }}

              echo -e "================> ${PURPLE}Rendering ADO project name${NC}"
              sed -i 's|<var>ADO_PROJECT_NAME</var>|$(System.TeamProject)|g' ${{ parameters.verification_report_template_location }}

              echo -e "================> ${PURPLE}Rendering 'ready for' (production/use) value${NC}"
              sed -i 's|<var>IS_READY_FOR</var>|${{ parameters.ready_for }}|g' ${{ parameters.verification_report_template_location }}

              echo -e "================> ${PURPLE}Rendering pipeline run link${NC}"
              sed -i 's|<var>ADO_PIPELINE_RUN_LINK</var>|$(System.CollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId)\&view=results|g' ${{ parameters.verification_report_template_location }}

              echo -e "================> ${PURPLE}Rendering pipeline run artifacts link${NC}"
              sed -i 's|<var>ARTIFACTS_ADO_PIPELINE_LINK</var>|$(System.CollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId)\&view=artifacts\&pathAsName=false\&type=publishedArtifacts|g' ${{ parameters.verification_report_template_location }}

              ls -la
            env:
              SYSTEM_ACCESSTOKEN: $(System.AccessToken)
              COMMIT_HASH: $(Build.SourceVersion)
            displayName: Generate verification report as HTML

          - publish: ${{ parameters.verification_report_template_location }}
            artifact: verification_report
            displayName: Publish verification report as build artifact

          
